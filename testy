!echo "david39, 1, 2, 1, -3, 4" > test2.txt
!echo "tereza, 5, 4, 3, 1, 5" >> test2.txt
!echo "martina, 1, 5, -2, 4, 3" >> test2.txt

def get_students_marks(filename):
    students_marks = {}
    try:
        file = open(filename, 'r')
    except FileNotFoundError:
        print(f"Specified file with filename {filename} not found")
    except:
        print("Unknown error. Please contact IT support.")
    else:
        for row in file:
            data = [cell.strip() for cell in row.split(",")]
            name = data[0]
            try:
                marks = list(map(int, [mark.replace("-", "") for mark in data[1:]]))
            except ValueError:
                print("Not all marks were integer numbers.")
            except:
                print("Unknown error. Please contact IT support.")
            for mark in marks:
                if not 1 <= mark <= 5:
                    raise Exception("Not all marks in file are between 1 to 5")
                else:
                    print("Číslo je v pořádku.")

            students_marks[name] = marks
        file.close()
        print("All data are alright!")
    finally:
        print("Reading done!")
    return students_marks

def get_average_marks(students_marks):
    average_marks = {}
    for student_name in students_marks:
        try:
            average_marks[student_name] = sum(students_marks[student_name])/len(students_marks[student_name])
        except ZeroDivisionError:
            average_marks[student_name] = "N"
        except:
            print(f"Unknow exception at student: {student_name}. Student will be ignored.")
    return average_marks

def print_marks(average_marks):
    for istudent, student in enumerate(average_marks):
        print(f"id: {istudent+1} name:{student} average mark:{average_marks[student]}")

def run_tests(testing=True):
    if testing:

        test_file = ["test2.txt"]
        nrows = len(get_students_marks(test_file))
        assert nrows == 3

        test_file = ["test2.txt"]
        return_type = type(get_students_marks(test_file))
        assert str(return_type) == "<class 'dict'>"

        test_file= ["test2.txt"]
        first_tuple = list(get_students_marks(test_file).items())[0]
        print(first_tuple)
        assert first_tuple == ("david",[1, 2, 1, 3, 4])

        test_file= ["test2.txt"]
        last_tuple = list(get_students_marks(test_file).items())[-1]
        assert last_tuple == ("tereza",[5, 2, 3, 1, 5])

        test_file= ["test2.txt"]
        last_tuple = list(get_students_marks(test_file).items())[-2]
        assert last_tuple == ("martina",[2, 5, 3, 3, 3])

        test_file = ["non_existing.txt"]
        empty_marks = get_students_marks(test_file)
        assert empty_marks == {}

def main():
    students_marks = get_students_marks("test2.txt")
    average_marks = get_average_marks(students_marks)
    print_marks(average_marks)

if __name__ == "__main__":
    run_tests(False)
    main()
